// src/components/MatchingGamePage.js
import React, { useState } from 'react';
import './MatchingGamePage.css';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
import radostImage from '../images/—Ä–∞–¥–æ—Å—Ç—å.jpg';
import pechalImage from '../images/–ø–µ—á–∞–ª—å.jpg';
import gnevImage from '../images/–≥–Ω–µ–≤.jpg';
import strahImage from '../images/—Å—Ç—Ä–∞—Ö.jpg';
import brezglivostImage from '../images/–±—Ä–µ–∑–≥–ª–∏–≤–æ—Å—Ç—å.jpg';

const emotions = [
  { id: '1', name: '–†–∞–¥–æ—Å—Ç—å', image: radostImage },
  { id: '2', name: '–ü–µ—á–∞–ª—å', image: pechalImage },
  { id: '3', name: '–ì–Ω–µ–≤', image: gnevImage },
  { id: '4', name: '–°—Ç—Ä–∞—Ö', image: strahImage },
  { id: '5', name: '–ë—Ä–µ–∑–≥–ª–∏–≤–æ—Å—Ç—å', image: brezglivostImage },
];

function MatchingGamePage() {
  const [leftItems, setLeftItems] = useState(emotions);
  const [rightItems, setRightItems] = useState(
    emotions
      .map((e) => ({ id: e.id, name: e.name }))
      .sort(() => Math.random() - 0.5)
  );
  const [selectedImage, setSelectedImage] = useState(null);
  const [selectedName, setSelectedName] = useState(null);
  const [matchedPairs, setMatchedPairs] = useState([]);
  const [isGameFinished, setIsGameFinished] = useState(false);
  const [showMismatchAnimation, setShowMismatchAnimation] = useState(false);

  const handleImageClick = (item) => {
    setSelectedImage(item);
    if (selectedName) {
      checkMatch(item, selectedName);
    }
  };

  const handleNameClick = (item) => {
    setSelectedName(item);
    if (selectedImage) {
      checkMatch(selectedImage, item);
    }
  };

  const checkMatch = (imageItem, nameItem) => {
    if (imageItem.id === nameItem.id) {
      // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–∞—Ç—á
      setMatchedPairs([...matchedPairs, { image: imageItem, name: nameItem }]);
      setLeftItems(leftItems.filter((item) => item.id !== imageItem.id));
      setRightItems(rightItems.filter((item) => item.id !== nameItem.id));
      setSelectedImage(null);
      setSelectedName(null);
      if (matchedPairs.length + 1 === emotions.length) {
        setIsGameFinished(true);
      }
    } else {
      // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–∞—Ç—á —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
      setShowMismatchAnimation(true);
      setTimeout(() => {
        setShowMismatchAnimation(false);
      }, 500);
      setSelectedImage(null);
      setSelectedName(null);
    }
  };

  const resetGame = () => {
    setLeftItems(emotions);
    setRightItems(
      emotions
        .map((e) => ({ id: e.id, name: e.name }))
        .sort(() => Math.random() - 0.5)
    );
    setMatchedPairs([]);
    setSelectedImage(null);
    setSelectedName(null);
    setIsGameFinished(false);
  };

  return (
    <div className="matching-game-page">
      <h1>–°–æ–µ–¥–∏–Ω–∏—Ç–µ —ç–º–æ—Ü–∏–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏</h1>
      {isGameFinished && (
        <div className="game-finished">
          <h2>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å–æ–ø–æ—Å—Ç–∞–≤–∏–ª–∏ –≤—Å–µ —ç–º–æ—Ü–∏–∏! üéâ</h2>
          <button onClick={resetGame}>üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ</button>
        </div>
      )}
      <div className="matched-pairs">
        {matchedPairs.map((pair) => (
          <div key={pair.image.id} className="matched-pair">
            <img src={pair.image.image} alt={pair.image.name} />
            <p>{pair.name.name}</p>
          </div>
        ))}
      </div>
      {!isGameFinished && (
        <div
          className={`matching-container ${
            showMismatchAnimation ? 'shake' : ''
          }`}
        >
          <div className="left-column">
            {leftItems.map((item) => (
              <div
                key={item.id}
                className={`left-item ${
                  selectedImage && selectedImage.id === item.id ? 'selected' : ''
                }`}
                onClick={() => handleImageClick(item)}
              >
                <img src={item.image} alt={item.name} />
              </div>
            ))}
          </div>
          <div className="right-column">
            {rightItems.map((item) => (
              <div
                key={item.id}
                className={`right-item ${
                  selectedName && selectedName.id === item.id ? 'selected' : ''
                }`}
                onClick={() => handleNameClick(item)}
              >
                <p>{item.name}</p>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}

export default MatchingGamePage;
